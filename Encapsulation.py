# -*- coding: utf-8 -*-
"""Encapsulation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AVwjdWoCVTHsWnk3C91txvdbdZGcNjwr
"""

#Operator Overloading

class A:
  def info(self):
    print("hey info functions")

  def __gt__(self,x):
    print("greatern function")

a1=A()
a2=A()
a1>a2 #a1.__gt__(a2)
#print(a1)

#Encapsulation

#Encapsulation
#Variable and method combine 1 single jahah pr -- class
#Acessibility

'''
Private : Private to the class
Pritected :  Protected to the class and subclass
Public : public to all (kahin se bhi  koi bhi)
Default : (Package Protected)
Module: Module is simlpy a file (jaha hm program likhte hai)
Library : collection of modules or pakages is called as Library
Package : collecction of same book is called as package
'''

class A:
  _salary=1000      # it act as a protected variable

class B:
  gender="Male"
  def abcd(self):
    print(A._salary)

b1=B()
b1.abcd()

class A:
  _salary=1000      # it act as a protected variable
  def info(self):
    print(A._salary)

a1=A()
#a1.__salary      #will give error as salary is private variable
a1.info()         # access as __salary is used inside the class and function

class A:
  __salary=1000      # it act as a protected variable

a1=A()
a1._A__salary

